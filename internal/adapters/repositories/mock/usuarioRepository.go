// Code generated by MockGen. DO NOT EDIT.
// Source: ./usuarioRepository.go
//
// Generated by this command:
//
//	mockgen -source=./usuarioRepository.go -destination=./mock/usuarioRepository.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	criptomonedas "primerProjecto/internal/entities/criptomonedas"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUsuarioRepository is a mock of UsuarioRepository interface.
type MockUsuarioRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsuarioRepositoryMockRecorder
}

// MockUsuarioRepositoryMockRecorder is the mock recorder for MockUsuarioRepository.
type MockUsuarioRepositoryMockRecorder struct {
	mock *MockUsuarioRepository
}

// NewMockUsuarioRepository creates a new mock instance.
func NewMockUsuarioRepository(ctrl *gomock.Controller) *MockUsuarioRepository {
	mock := &MockUsuarioRepository{ctrl: ctrl}
	mock.recorder = &MockUsuarioRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsuarioRepository) EXPECT() *MockUsuarioRepositoryMockRecorder {
	return m.recorder
}

// AgregarMonedaFavorita mocks base method.
func (m *MockUsuarioRepository) AgregarMonedaFavorita(idUsuario, idMoneda int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgregarMonedaFavorita", idUsuario, idMoneda)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgregarMonedaFavorita indicates an expected call of AgregarMonedaFavorita.
func (mr *MockUsuarioRepositoryMockRecorder) AgregarMonedaFavorita(idUsuario, idMoneda any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgregarMonedaFavorita", reflect.TypeOf((*MockUsuarioRepository)(nil).AgregarMonedaFavorita), idUsuario, idMoneda)
}

// DeleteMonedasDeInteres mocks base method.
func (m *MockUsuarioRepository) DeleteMonedasDeInteres(usuarioId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonedasDeInteres", usuarioId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMonedasDeInteres indicates an expected call of DeleteMonedasDeInteres.
func (mr *MockUsuarioRepositoryMockRecorder) DeleteMonedasDeInteres(usuarioId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonedasDeInteres", reflect.TypeOf((*MockUsuarioRepository)(nil).DeleteMonedasDeInteres), usuarioId)
}

// FindMonedasByUsuarioID mocks base method.
func (m *MockUsuarioRepository) FindMonedasByUsuarioID(id int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMonedasByUsuarioID", id)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMonedasByUsuarioID indicates an expected call of FindMonedasByUsuarioID.
func (mr *MockUsuarioRepositoryMockRecorder) FindMonedasByUsuarioID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMonedasByUsuarioID", reflect.TypeOf((*MockUsuarioRepository)(nil).FindMonedasByUsuarioID), id)
}

// FindUsuarioById mocks base method.
func (m *MockUsuarioRepository) FindUsuarioById(id int) (*criptomonedas.Usuario, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsuarioById", id)
	ret0, _ := ret[0].(*criptomonedas.Usuario)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsuarioById indicates an expected call of FindUsuarioById.
func (mr *MockUsuarioRepositoryMockRecorder) FindUsuarioById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsuarioById", reflect.TypeOf((*MockUsuarioRepository)(nil).FindUsuarioById), id)
}

// FindUsuariosByMonedaID mocks base method.
func (m *MockUsuarioRepository) FindUsuariosByMonedaID(id int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsuariosByMonedaID", id)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsuariosByMonedaID indicates an expected call of FindUsuariosByMonedaID.
func (mr *MockUsuarioRepositoryMockRecorder) FindUsuariosByMonedaID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsuariosByMonedaID", reflect.TypeOf((*MockUsuarioRepository)(nil).FindUsuariosByMonedaID), id)
}

// PatchUsuarioByID mocks base method.
func (m *MockUsuarioRepository) PatchUsuarioByID(id int, updates map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchUsuarioByID", id, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchUsuarioByID indicates an expected call of PatchUsuarioByID.
func (mr *MockUsuarioRepositoryMockRecorder) PatchUsuarioByID(id, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUsuarioByID", reflect.TypeOf((*MockUsuarioRepository)(nil).PatchUsuarioByID), id, updates)
}

// RegistrarAuditoria mocks base method.
func (m *MockUsuarioRepository) RegistrarAuditoria(usuarioId, cotizacionID int, logOperacion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarAuditoria", usuarioId, cotizacionID, logOperacion)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistrarAuditoria indicates an expected call of RegistrarAuditoria.
func (mr *MockUsuarioRepositoryMockRecorder) RegistrarAuditoria(usuarioId, cotizacionID, logOperacion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarAuditoria", reflect.TypeOf((*MockUsuarioRepository)(nil).RegistrarAuditoria), usuarioId, cotizacionID, logOperacion)
}

// SaveUsuario mocks base method.
func (m *MockUsuarioRepository) SaveUsuario(usuario criptomonedas.Usuario) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUsuario", usuario)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUsuario indicates an expected call of SaveUsuario.
func (mr *MockUsuarioRepositoryMockRecorder) SaveUsuario(usuario any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUsuario", reflect.TypeOf((*MockUsuarioRepository)(nil).SaveUsuario), usuario)
}

// UpdateMonedasDeInteres mocks base method.
func (m *MockUsuarioRepository) UpdateMonedasDeInteres(usuarioId int, monedas []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonedasDeInteres", usuarioId, monedas)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMonedasDeInteres indicates an expected call of UpdateMonedasDeInteres.
func (mr *MockUsuarioRepositoryMockRecorder) UpdateMonedasDeInteres(usuarioId, monedas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonedasDeInteres", reflect.TypeOf((*MockUsuarioRepository)(nil).UpdateMonedasDeInteres), usuarioId, monedas)
}

// UpdateUsuarioById mocks base method.
func (m *MockUsuarioRepository) UpdateUsuarioById(id int, usuario criptomonedas.Usuario) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsuarioById", id, usuario)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsuarioById indicates an expected call of UpdateUsuarioById.
func (mr *MockUsuarioRepositoryMockRecorder) UpdateUsuarioById(id, usuario any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsuarioById", reflect.TypeOf((*MockUsuarioRepository)(nil).UpdateUsuarioById), id, usuario)
}
